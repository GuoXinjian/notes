{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to MkDocs For full documentation visit mkdocs.org . Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Welcome to MkDocs"},{"location":"#welcome-to-mkdocs","text":"For full documentation visit mkdocs.org .","title":"Welcome to MkDocs"},{"location":"#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Commands"},{"location":"#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"Go/Gorm/%E9%80%9A%E7%94%A8CURD%E6%96%B9%E6%B3%95/","text":"\u901a\u7528CURD\u65b9\u6cd5 database.go package database import ( \"app/database\" \"gorm.io/driver/mysql\" \"gorm.io/gorm\" ) var MysqlDB *gorm.DB func MysqlInit() error { var err error MysqlDB, err = gorm.Open(mysql.Open(Host), &gorm.Config{}) if err != nil { panic(err) } return err } basemodel.go package model import ( \"app/database\" ) type TableNameAble interface { TableName() string } func Create(value TableNameAble) error { err := database.MysqlDB.Create(value).Error return err } user.go package model import ( \"gorm.io/gorm\" ) type User struct { gorm.Model Name string Age int } func (User) TableName() string { return \"User\" } controller.go \u4ee5Gin\u4e3a\u4f8b package controller import ( \"app/model\" \"github.com/gin-gonic/gin\" ) func Create(c *gin.Context) { var user model.User user.Name = \"username\" user.Age = age err := model.Create(&user) if err != nil { c.JSON(500, gin.H{ \"message\": \"create failed\", }) return } c.JSON(200, gin.H{ \"message\": \"create success\", }) }","title":"\u901a\u7528CURD\u65b9\u6cd5"},{"location":"Go/Gorm/%E9%80%9A%E7%94%A8CURD%E6%96%B9%E6%B3%95/#curd","text":"database.go package database import ( \"app/database\" \"gorm.io/driver/mysql\" \"gorm.io/gorm\" ) var MysqlDB *gorm.DB func MysqlInit() error { var err error MysqlDB, err = gorm.Open(mysql.Open(Host), &gorm.Config{}) if err != nil { panic(err) } return err } basemodel.go package model import ( \"app/database\" ) type TableNameAble interface { TableName() string } func Create(value TableNameAble) error { err := database.MysqlDB.Create(value).Error return err } user.go package model import ( \"gorm.io/gorm\" ) type User struct { gorm.Model Name string Age int } func (User) TableName() string { return \"User\" } controller.go \u4ee5Gin\u4e3a\u4f8b package controller import ( \"app/model\" \"github.com/gin-gonic/gin\" ) func Create(c *gin.Context) { var user model.User user.Name = \"username\" user.Age = age err := model.Create(&user) if err != nil { c.JSON(500, gin.H{ \"message\": \"create failed\", }) return } c.JSON(200, gin.H{ \"message\": \"create success\", }) }","title":"\u901a\u7528CURD\u65b9\u6cd5"}]}